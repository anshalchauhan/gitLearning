1. Install Git

2. Update Git Info about user
PS C:\Users\Anshal Chauhan> git config --global user.name "anshal"
PS C:\Users\Anshal Chauhan> git config --global user.email "anshalchauhan889@gmail.com"

3. Git, Working Directory, Staging area and commit history concepts

4. git init - to initialize repository
PS A:\practice\git> git init
Initialized empty Git repository in A:/practice/git/.git/

5. Project Directory = Git
Under Git -> Working Directory and Local repository(.git, hidden folder)

under Local repository -> Staging area.

Add untracked files(files in working directory to staging area)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        notes.txt

Commit is the object to add the file in staging area.

6. Add git files to staging area
PS A:\practice\git> git add notes.txt
PS A:\practice\git> git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   notes.txt

PS A:\practice\git>

it is in staging environment not staged yet.
to stage it use 

git commit -m "(give some commit name here)"
PS A:\practice\git> git commit -m "notes commit"
[main (root-commit) d706c8b] notes commit
 1 file changed, 26 insertions(+)
 create mode 100644 notes.txt


7. git log - to see all commit history
PS A:\practice\git> git log
commit d706c8b40f8a16698d5ed12b48229d36c5371f34 (HEAD -> main)
Author: anshal <anshalchauhan889@gmail.com>
Date:   Fri Feb 2 13:15:01 2024 +0530

    notes commit

8. To skip the stagin part use -a
PS A:\practice\git> git commit -a -m "notes 1 commit"
[main aec8e88] notes 1 commit
 1 file changed, 32 insertions(+), 1 deletion(-)

9. diff command - To know what has been added till last commit
PS A:\practice\git> git diff
diff --git a/notes.txt b/notes.txt
index e4bc714..10e93ce 100644     
--- a/notes.txt
+++ b/notes.txt
@@ -55,3 +55,8 @@ Date:   Fri Feb 2 13:15:01 2024 +0530
     notes commit

 8. To skip the stagin part use -a
+PS A:\practice\git> git commit -a -m "notes 1 commit"
+[main aec8e88] notes 1 commit
+ 1 file changed, 32 insertions(+), 1 deletion(-)
+
+9. diff command - To know what has been added till last commit

10. If u have staged the changes then use
git diff --staged

11. git add notes.txt credentials.txt
or
for all files use
git add .

12. Delete
first delete file from git.
git rm --cached credentials.txt

then delete from working directory

13. Remote repository - this comes into picture for collaboration, various tools like github, gitlab and bitbucket

14. git clone https.....
to clone a repository

15. Creating repository

16. To connect your local repository to remote repository
Two ways,
1. HTTPS
2. SSH

Choose ssh, because in https user will have to login for every commit,
To choose ssh
use command 

ssh-keygen -o
(***remember only once use this command)

Enter same passphrase again: 
Your identification has been saved in C:\Users\Anshal Chauhan/.ssh/id_rsa.
Your public key has been saved in C:\Users\Anshal Chauhan/.ssh/id_rsa.pub. 
The key fingerprint is:
SHA256:6UzS8vjFvIBFT8i/T9tjHOuX69P7hppPcwU33owjxbw anshal chauhan@ANSHAL   
The key's randomart image is:
+---[RSA 3072]----+
|                 |
|       . .   o   |
|        + .   =..|
|       o =   ..*o|
|      o S o . E.+|
|       @ o . ....|
|      o = = ..o++|
|       . o + =*=+|
|        . . ===B*|
+----[SHA256]-----+

Go to the directory where .ssh is saved
PS C:\users\Anshal Chauhan\.ssh>

Enter command: ls

PS C:\users\Anshal Chauhan\.ssh> cat id_rsa.pub
ssh-rsa AAAABS...........TmRl6k= anshal chauhan@ANSHAL

Copy the entire key
Go to Github -> settings -> SSh and Gpg keys -> New SSh key -> (add title, add ssh key) -> add ssh key

Every time u push something this ssh key will be verfied.

17. to map local repository to remote repository
git branch -M main
git remote add origin git@github.com:anshalchauhan/gitLearning.git
git push -u origin main

18. git commit will only update file in local respository
for commiting in remote repository we need to push the change after commiting

PS A:\practice\git> git commit -a -m "notes 4 commit" 
[main 875d235] notes 4 commit  
 1 file changed, 1 insertion(+)
PS A:\practice\git> 

PS A:\practice\git> git push origin main
Enumerating objects: 8, done.
Counting objects: 100% (8/8), done.
Delta compression using up to 4 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 1.13 KiB | 1.13 MiB/s, done.
Total 6 (delta 2), reused 0 (delta 0), pack-reused 0     
remote: Resolving deltas: 100% (2/2), completed with 1 local object.       
To github.com:anshalchauhan/gitLearning.git
   145923d..875d235  main -> main
PS A:\practice\git>

in the command git push origin main, "origin" refers to the remote repository url, this is done to make referencing easier

19. Remote server, command to see origin
PS A:\practice\git> git remote -v
origin  git@github.com:anshalchauhan/gitLearning.git (fetch)
origin  git@github.com:anshalchauhan/gitLearning.git (push) 

20. Tagging, we give the code a tag after some commits, tag is like a version number
to check how many tags have been given to this code
PS A:\practice\git> git tag
2 options
1. Annotated tagging
2. lightweigh tagging

Annotated has more Info

to tag code :

PS A:\practice\git> git tag -a v1.0 -m "1st release"
PS A:\practice\git> git tag
v1.0

-a for annotated and -m for message (message is important)

to see the info about tag :

PS A:\practice\git> git show v1.0
tag v1.0
Tagger: anshal <anshalchauhan889@gmail.com>
Date:   Fri Feb 2 16:55:15 2024 +0530

1st release

commit 875d23513c9abd52d792e93c1179ae6168cbdf9f (HEAD -> main, tag: v1.0, origin/main)
Author: anshal <anshalchauhan889@gmail.com>
Date:   Fri Feb 2 15:57:58 2024 +0530

    notes 4 commit

diff --git a/notes.txt b/notes.txt
index aacc867..1b147a2 100644
--- a/notes.txt
:

The git tag will be updated in local repository only, to update it in git(remote repository), we need to push the tag

PS A:\practice\git> git push origin v1.0
Enumerating objects: 1, done.
Counting objects: 100% (1/1), done.
Writing objects: 100% (1/1), 161 bytes | 161.00 KiB/s, done.
Total 1 (delta 0), reused 0 (delta 0), pack-reused 0        
To github.com:anshalchauhan/gitLearning.git
 * [new tag]         v1.0 -> v1.0

21. Git clone
git clone (repo url)

22. Branching
If we want to test some code, then we will create another branch, and once it's verified and the code works properly we will update that to the main branch

to create branch:
two ways
old : git checkout
new : git switch

to create a new branch, for first time we use -b
PS A:\practice\git> git checkout -b test1
Switched to a new branch 'test1'
PS A:\practice\git> 

PS A:\practice\git> git branch
  main
* test1

* one means the current branch

PS A:\practice\git> git commit -a -m "git branch learning 1"
[test1 580e8ff] git branch learning 1
 1 file changed, 33 insertions(+), 1 deletion(-)
PS A:\practice\git> 

this is commited to the current branch, which means test1 branch and not main

now if u change to main branch, the changes will be gone, in your local repository, no cahnge will happen in remote repository because we have not pushed the branch in remote respository



To switch branch use:

PS A:\practice\git> git switch main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.


you can use switch instead of checkout, for switch add -c

PS A:\practice\git> git switch -c test2
Switched to a new branch 'test2'

git branch will show all local branches and git branch --all will show the local and remote branches also

PS A:\practice\git> git branch 
  main
  test1
* test2
PS A:\practice\git> git branch --all
  main
  test1
* test2
  remotes/origin/main
PS A:\practice\git> 




To Switch back to previous branch use the command

PS A:\practice\git> git switch -
Switched to branch 'test1'
M       notes.txt   



To delete a branch

PS A:\practice\git> git branch -d test2
Deleted branch test2 (was e379184).
PS A:\practice\git> 


Pushing a branch

PS A:\practice\git> git push origin test1
Enumerating objects: 11, done.
Counting objects: 100% (11/11), done.
Delta compression using up to 4 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (9/9), 1.59 KiB | 816.00 KiB/s, done.
Total 9 (delta 3), reused 0 (delta 0), pack-reused 0       
remote: Resolving deltas: 100% (3/3), completed with 1 local object.       
remote: 
remote: Create a pull request for 'test1' on GitHub by visiting:
remote:      https://github.com/anshalchauhan/gitLearning/pull/new/test1   
remote:
To github.com:anshalchauhan/gitLearning.git
 * [new branch]      test1 -> test1
PS A:\practice\git> 



How branching works, explained in telusko video
Head pointer pointes to the current branch

branches pointer still points to their respective commits.
(commit is nothing but a snapshot)


Install git graph vscode extension to help u visualize project.



Merging 2 branches
for merging main and test1, 1st switch to main and then use command:

PS A:\practice\git> git switch main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
PS A:\practice\git> git merge test1
Updating 1d806f4..ae68c67
Fast-forward
 notes.txt | 122 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 121 insertions(+), 1 deletion(-)
PS A:\practice\git> 

